---
title: "Error Handling"
---

# Error Handling

## Exception Hierarchy

    class PlatformException : public std::runtime_error {
    public:
        enum class ErrorCode {
            INITIALIZATION_FAILED,
            HARDWARE_ERROR,
            CONFIGURATION_ERROR,
            COMMUNICATION_ERROR,
            TIMEOUT_ERROR,
            PERMISSION_ERROR
        };
        
        PlatformException(ErrorCode code, const std::string& message);
        ErrorCode getErrorCode() const;
        const char* getErrorString() const;
    };

## Error Categories

### Hardware Errors

    try {
        gpio.configurePin(18, GPIO::Mode::OUTPUT);
    } catch (const HardwareException& e) {
        if (e.getErrorCode() == ErrorCode::PERMISSION_ERROR) {
            logger.error("Permission denied. Run with sudo or add user to gpio group");
        } else {
            logger.error("Hardware error: {}", e.what());
        }
    }

### Configuration Errors

    try {
        config.loadFromFile("config.json");
    } catch (const ConfigException& e) {
        logger.error("Configuration error: {}", e.what());
        // Load default configuration
        config.loadDefaults();
    }

### Communication Errors

    try {
        i2c.write(deviceAddress, data);
    } catch (const CommunicationException& e) {
        if (e.getErrorCode() == ErrorCode::TIMEOUT_ERROR) {
            // Retry with longer timeout
            i2c.setTimeout(2000);
            i2c.write(deviceAddress, data);
        } else {
            throw; // Propagate other communication errors
        }
    }

## Error Recovery Strategies

### Automatic Retry

    class RetryStrategy {
    public:
        template<typename Func>
        auto execute(Func&& operation, int maxRetries = 3) -> decltype(operation()) {
            for (int attempt = 1; attempt <= maxRetries; ++attempt) {
                try {
                    return operation();
                } catch (const CommunicationException& e) {
                    if (attempt == maxRetries) throw;
                    std::this_thread::sleep_for(std::chrono::milliseconds(100 * attempt));
                }
            }
            throw PlatformException(ErrorCode::RETRY_FAILED, "Max retries exceeded");
        }
    };

### Graceful Degradation

    class HardwareManager {
    public:
        void initializeSubsystems() {
            try {
                initGPIO();
            } catch (const HardwareException& e) {
                logger.warning("GPIO initialization failed: {}. Some features will be disabled", e.what());
                gpioAvailable = false;
            }
            
            try {
                initI2C();
            } catch (const HardwareException& e) {
                logger.warning("I2C initialization failed: {}. Some features will be disabled", e.what());
                i2cAvailable = false;
            }
        }
    };

## Logging and Debugging

### Debug Information

    class ErrorContext {
    public:
        void addContext(const std::string& key, const std::string& value);
        std::string getDebugInfo() const;
        
    private:
        std::map<std::string, std::string> context;
    };

### Error Reporting

    void reportError(const PlatformException& e, const ErrorContext& context) {
        logger.error("Error occurred: {}", e.what());
        logger.error("Error code: {}", e.getErrorCode());
        logger.error("Context: {}", context.getDebugInfo());
        
        if (config.isDebugMode()) {
            logger.debug("Stack trace:\n{}", e.getStackTrace());
        }
    } 